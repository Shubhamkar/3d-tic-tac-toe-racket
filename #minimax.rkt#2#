#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 63 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 2656 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(require racket/set)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"include"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"win.rkt\""
0 0 24 3 2 #") "
0 0 17 3 29 #"; comment out this line later"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(include \"symmetry.rkt\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"move-tree"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtrees"
0 0 24 3 2 #"))"
0 0 17 3 16 #"; #:transparent)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"leaf"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 17 3 16 #"; #:transparent)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 4 #"leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 8 #"subtrees"
0 0 24 3 2 #") "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 15 #"last-played-pos"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 4 #" 0))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 2 #" ("
0 0 17 3 10 #"set!-value"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 6 #") -1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 2 #" ("
0 0 17 3 10 #"set!-value"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 6 #") -1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #";("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 2 #" ("
0 0 17 3 10 #"set!-value"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 8 #" 0) -1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #";("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 2 #" ("
0 0 17 3 10 #"set!-value"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 7 #" 0) 1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 2 #" ("
0 0 17 3 10 #"set!-value"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 6 #") -1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 2 #" ("
0 0 17 3 10 #"set!-value"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 6 #") -1))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; play-n-turns is the main function"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; it uses the all-plays function to generate the play a move"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";; and score function to evaluate that move"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";; The win? function needs to be modified, perhaps,"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";; coupled with the score function to evaluate partial success"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-plays-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lpp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 30 #";; denoting all possible moves"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 58
#";; lpp is for last-played position, used in win? function."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ap-h"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lpp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"set!-value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lpp"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sign"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"ap-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"ap-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"ap-h"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; Expands a leaf into a gnode of depth 1"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; This function (sign) depends on myturn"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"all-plays"
0 0 24 3 1 #" "
0 0 14 3 10 #"leaf-b-lpp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 30 #";; denoting all possible moves"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 58
#";; lpp is for last-played position, used in win? function."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ap-h"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"64"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 9 #"get-value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"leaf-val"
0 0 24 3 1 #" "
0 0 14 3 10 #"leaf-b-lpp"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"leaf"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"set!-value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"leaf-val"
0 0 24 3 1 #" "
0 0 14 3 10 #"leaf-b-lpp"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sign"
0 0 24 3 3 #")) "
0 0 14 3 1 #"i"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"ap-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"ap-h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 2 #" ("
0 0 14 3 4 #"ap-h"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 17 3 18 #"; list of subtrees"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 8 #"leaf-val"
0 0 24 3 1 #" "
0 0 14 3 10 #"leaf-b-lpp"
0 0 24 3 2 #") "
0 0 14 3 2 #"st"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-lpp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 4 #"win?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-lpp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"board-lpp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"remove-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"remove-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 10 #"remove-all"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"play-n-turns-2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 2 #"bl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 7 #";(void)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 27 #";(displayln (map score bl))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 2 #"bl"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"new-bl"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 7 #"append*"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ele"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 11 #"all-plays-2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 2 #"bl"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 14 #"play-n-turns-2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 6 #"new-bl"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"display-list"
0 0 24 3 1 #" "
0 0 14 3 7 #"vec-lpp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ele"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"i=\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"; lpp=\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"; board=\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"display-board"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 14 3 7 #"vec-lpp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"newline"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"minimax"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lpp"
0 0 24 3 2 #") "
0 0 17 3 34 #"; b-lpp is a pair of board and lpp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"orig-turn"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 17 3 2 #";("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 6 #"myturn"
0 0 17 3 2 #" ("
0 0 17 3 12 #"not myturn))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lpp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"points"
0 0 24 3 2 #" ("
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lpp"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-moves"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-plays-2"
0 0 24 3 1 #" "
0 0 14 3 5 #"b-lpp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"all-scores"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"b-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"b-l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 14 3 9 #"all-moves"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 6 #"points"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 17 3 22 #";(displayln all-moves)"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 17 3 23 #";(displayln all-scores)"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 10 #"all-scores"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 17 3 22 #";(displayln all-moves)"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 17 3 23 #";(displayln all-scores)"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 10 #"all-scores"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 6 #"points"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #" "
0 0 14 3 9 #"orig-turn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 14 3 3 #"res"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"play-n-turns-3"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-moves"
0 0 24 3 2 #" ("
0 0 14 3 11 #"all-plays-2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"board"
0 0 24 3 1 #" "
0 0 14 3 15 #"last-played-pos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 6 #"myturn"
0 0 17 3 14 #" (not myturn))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"am-vec"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-moves"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"all-scores"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"b-l"
0 0 24 3 3 #") ("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 3 #"b-l"
0 0 24 3 3 #")) "
0 0 14 3 9 #"all-moves"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"best-score"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 14 3 10 #"all-scores"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-moves"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 10 #"all-scores"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"search-best"
0 0 24 3 1 #" "
0 0 14 3 3 #"m-l"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"No such move with score: \""
0 0 24 3 1 #" "
0 0 14 3 10 #"best-score"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 10 #"best-score"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cdar"
0 0 24 3 1 #" "
0 0 14 3 3 #"m-l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"search-best"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"m-l"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"s-l"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 2 #" ("
0 0 14 3 11 #"search-best"
0 0 24 3 1 #" "
0 0 14 3 9 #"all-moves"
0 0 24 3 1 #" "
0 0 14 3 10 #"all-scores"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";("
0 0 17 3 4 #"set!"
0 0 17 3 1 #" "
0 0 17 3 6 #"myturn"
0 0 17 3 14 #" (not myturn))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; First goes to a depth of 1."
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";; If there are any moves leading to a win, plays one of them random"
 #"ly."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; The implementation of minimax as its written is wrong"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; During the turn of the other player, paths that"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; the other player must take to prevent me from winning"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";; have been ignored."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";; Changes are also needed in the win, score and all-plays"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; functions to make them state independent."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"play-n-turns"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"orig-turn"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  (define depth-1 '())"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";  (define win-list-1 '())"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  (define depth-2 '())"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";  (define loss-list-2 '())"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  (define depth-3 '())"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";  (define win-list-3 '())"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  (define depth-4 '())"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"increase-depth"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #") "
0 0 17 3 38 #"; increases the depth of the tree by 1"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 9 #"all-plays"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 14 #"increase-depth"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 55 #";; The times at which score (and hence, has-losing-leaf"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 62
#";; or has-winning-leaf) is called is important - myturn is the"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 17 #";; state variable"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"has-losing-leaf?"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #") "
0 0 17 3 43 #"; returns #t if the tree has a winning tree"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 46 #";; tree is supposed to be the gnode at depth 1"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 2 #" ("
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 5 #"ormap"
0 0 24 3 1 #" "
0 0 14 3 16 #"has-losing-leaf?"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"has-winning-leaf?"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"leaf"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 5 #"score"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 3 #") ("
0 0 14 3 5 #"ormap"
0 0 24 3 1 #" "
0 0 14 3 17 #"has-winning-leaf?"
0 0 24 3 1 #" "
0 0 14 3 2 #"st"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 31 #"remove-nodes-with-losing-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #") "
0 0 17 3 24 #"; assume tree is a gnode"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 9 #"gnode-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ele"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 16 #"has-losing-leaf?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 5 #"))) ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 32 #"remove-nodes-with-winning-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #") "
0 0 17 3 24 #"; assume tree is a gnode"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 9 #"gnode-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ele"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 17 #"has-winning-leaf?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 5 #"))) ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 30 #"keep-nodes-with-winning-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #") "
0 0 17 3 28 #"; assumes tree to be a gnode"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 9 #"gnode-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 17 #"has-winning-leaf?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 29 #"keep-nodes-with-losing-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #") "
0 0 17 3 28 #"; assumes tree to be a gnode"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 9 #"gnode-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 16 #"has-losing-leaf?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"minimax"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 17 3 26 #"; maximum depth is reached"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 30 #"keep-nodes-with-winning-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 31 #"remove-nodes-with-losing-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 4 #"))) "
0 0 17 3 24 #"; should this be remove?"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Tree\""
0 0 24 3 1 #")"
0 0 17 3 16 #"; (display tree)"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"move-tree"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"gnode-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Mod-tree\""
0 0 24 3 1 #")"
0 0 17 3 20 #"; (display mod-tree)"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"move-tree"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 9 #"gnode-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";           (cond (myturn"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ("
0 0 17 3 6 #"define"
0 0 17 3 48 #" mod-tree (keep-nodes-with-winning-leaves tree))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ("
0 0 17 3 2 #"if"
0 0 17 3 34 #" (null? (gnode-subtrees mod-tree))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 23 #"                      ("
0 0 17 3 3 #"cdr"
0 0 17 3 2 #" ("
0 0 17 3 7 #"get-val"
0 0 17 3 2 #" ("
0 0 17 3 53 #"list-ref (gnode-subtrees tree) ; can also be leaf-val"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 49 #"                                                ("
0 0 17 3 6 #"random"
0 0 17 3 35 #" (length (gnode-subtrees tree))))))"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                      ; if I can win immediately, win"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 23 #"                      ("
0 0 17 3 3 #"cdr"
0 0 17 3 2 #" ("
0 0 17 3 7 #"get-val"
0 0 17 3 2 #" ("
0 0 17 3 57 #"list-ref (gnode-subtrees mod-tree) ; can also be leaf-val"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 49 #"                                                ("
0 0 17 3 6 #"random"
0 0 17 3 42 #" (length (gnode-subtrees mod-tree)))))))) "
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                 ((not myturn)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ("
0 0 17 3 6 #"define"
0 0 17 3 49 #" mod-tree (remove-nodes-with-losing-leaves tree))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 19 #"                  ("
0 0 17 3 2 #"if"
0 0 17 3 34 #" (null? (gnode-subtrees mod-tree))"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";                      ; if all the moves result in my loss, play a "
 #"move at random"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 23 #"                      ("
0 0 17 3 3 #"cdr"
0 0 17 3 2 #" ("
0 0 17 3 7 #"get-val"
0 0 17 3 32 #" (list-ref (gnode-subtrees tree)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 47 #"                                              ("
0 0 17 3 6 #"random"
0 0 17 3 2 #" ("
0 0 17 3 65
#"length (gnode-subtrees tree)))))) ; tree could be a modified-tree"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 23 #"                      ("
0 0 17 3 3 #"cdr"
0 0 17 3 2 #" ("
0 0 17 3 7 #"get-val"
0 0 17 3 32 #" (list-ref (gnode-subtrees tree)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 47 #"                                              ("
0 0 17 3 6 #"random"
0 0 17 3 2 #" ("
0 0 17 3 41 #"length (gnode-subtrees mod-tree))))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #" ("
0 0 14 3 6 #"myturn"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 2 #" ("
0 0 14 3 30 #"keep-nodes-with-winning-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 3 #"win"
0 0 19 3 1 #" "
0 0 19 3 11 #"immediately"
0 0 19 3 1 #" "
0 0 19 3 11 #"at depth: \""
0 0 24 3 3 #") ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 14 #"increase-depth"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 32 #";; if I can win immediately, win"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 2 #") "
0 0 17 3 22 #"; can also be leaf-val"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 9 #")))))))) "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 2 #" ("
0 0 14 3 31 #"remove-nodes-with-losing-leaves"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 60
#";; if all the moves result in my loss, play a move at random"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gnode-subtrees"
0 0 24 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 7 #")))))) "
0 0 17 3 31 #"; tree could be a modified-tree"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"There"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 4 #"ways"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 5 #"which"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 8 #"opponent"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 3 #"win"
0 0 19 3 1 #" "
0 0 19 3 11 #"at depth: \""
0 0 24 3 3 #") ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 7 #"minimax"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 14 #"increase-depth"
0 0 24 3 1 #" "
0 0 14 3 8 #"mod-tree"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 2 #" ("
0 0 14 3 7 #"minimax"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 14 #"increase-depth"
0 0 24 3 2 #" ("
0 0 14 3 4 #"leaf"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 5 #"board"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"myturn"
0 0 24 3 1 #" "
0 0 14 3 9 #"orig-turn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 57 #";  (define (actual-move tree) ; if win is immediate, win!"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";    (define temp-tree (keep-nodes-with-winning-leaves tree))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";    (if (null? (gnode-subtrees temp-tree))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";        #f ; an immediate win is not possible"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";        (cdr (leaf-val (list-ref (gnode-subtrees temp-tree)"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";                                 (random (length (gnode-subtrees te"
 #"mp-tree))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";  (actual-move (increase-depth (leaf board last-played-pos)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 58
#";; During my turn, if I cannot win, I'll not choose a move"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 40 #";; that can result in my opponent's win."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 57 #";; Similarly, during the opponent's turn, if the opponent"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 70
(
 #";; cannot win, s/he will not choose a move that will result in my wi"
 #"n."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 79
(
 #";; Thus, at depth-1, we remove all nodes, that result in our defeat "
 #"at depth-2."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #";; At depth-2, "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 26 #";  (define (pnt2-h n tree)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";    (if (= n 0) tree"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";        (begin"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";          (define temp-tree  (increase-depth tree))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";          (cond (myturn"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";                 (define temp2-tree (keep-nodes-with-winning-leaves"
 #" temp-tree))"
) 0 0 24 29 1 #"\n"
0 0 17 3 43 #";                 (cond ((null? temp2-tree)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                        (set! myturn (not myturn))"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";                        (pnt2-h (- n 1) temp-tree))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                       (else temp2-tree)))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";                ((not myturn)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";                 ())"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";                (else (error \""
0 0 17 3 5 #"Cases"
0 0 17 3 1 #" "
0 0 17 3 3 #"are"
0 0 17 3 21 #" not exhaustive.\"))))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 20 #";  (define (pnt-h n)"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";    (cond ((= n 4) ;; this is the move of the greatest practical de"
 #"pth"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";           (set! depth-4 (increase-depth depth-3))"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";           (set! depth-4 (remove-nodes-with-losing-leaves depth-4))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";           (if (null? (gnode-subtrees depth-4))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";               (error \""
0 0 17 3 9 #"Situation"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 10 #"considered"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 4 #"your"
0 0 17 3 13 #" forced win\")"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";               (cdr (gnode-val (list-ref (gnode-subtrees depth-4) ("
 #"random (length (gnode-subtrees depth-4))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 19 #";          ((= n 3)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";           (set! depth-3 (increase-depth depth-2))"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";           (set! depth-3 (remove-nodes-with-winning-leaves depth-3)"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#";           ;; During the previous turn (opponent's turn),"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";           ;; the opponent would never play a move"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";           ;; that will allow me to win at this turn"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";           ;(set! win-list-3 (keep-nodes-with-winning-leaves depth-"
 #"3))"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";           (set! myturn (not myturn))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";           (if (null? (gnode-subtrees depth-3))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";               (error \""
0 0 17 3 2 #"No"
0 0 17 3 17 #" playable moves\")"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";               (pnt-h (+ n 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";          ((= n 2) ; opponent's turn"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";           (set! depth-2 (increase-depth depth-1))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";           (set! depth-2"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                 (remove-nodes-with-losing-leaves depth-2))"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";           (set! myturn (not myturn))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";           (if (null? (gnode-subtrees depth-2))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";               (error \""
0 0 17 3 9 #"Situation"
0 0 17 3 1 #" "
0 0 17 3 3 #"not"
0 0 17 3 1 #" "
0 0 17 3 10 #"considered"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 4 #"your"
0 0 17 3 13 #" forced win\")"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";               ; perhaps, play a random move from depth-1"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";               (pnt-h (+ n 1))))"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";          ((= n 1) ; myturn - ensure that play-n-turns is called on"
 #"ly"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #";           ;when it is my turn"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";           (set! depth-1 (increase-depth (leaf (cons board 0))))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;           (map (lambda (ele)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;                  (if (= 10 (score (leaf-val ele)))"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;                      (set! win-list-1 (cons (leaf-val ele) win-li"
 #"st-1))"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";;                      (void)))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;                (gnode-subtrees depth-1))"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";           (set! win-list-1 (keep-nodes-with-winning-leaves depth-1"
 #"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 38 #";           (set! myturn (not myturn))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";           (if (null? win-list-1)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";               (pnt-h (+ n 1))"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";               (cdr (leaf-val (list-ref win-list-1 (random (length "
 #"win-list-1)))))))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (pnt-h 1))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";(define (minimax)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ABANDONED CODE ;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;;;;;"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define (list-set->set-union ls)"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";  (define ret (mutable-set))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";  (if (null? ls) (mutable-set)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";      (begin"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";        (set-union! (car ls) (list-set->set-union (cdr ls)))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";        (car ls))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;; Takes about 50 s for depth 3;"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;; 0.24 sec for depth 2."
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;(define (play-n-turns-2 n board)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;  (if (= n 0)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;      board"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;      ;(displayln (map score bl))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";;      ;bs"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;      (let ()"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;        ;(define new-bs"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;          (map (lambda (gn)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;                 (map (lambda (board)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;                        (play-n-turns (- n 1) "
0 0 24 29 1 #"\n"
0 0 17 3 65
#";;                      (gnode-subtrees gn))(map bl all-plays-2))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;        ;(display-list new-bl)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;        ;(define new-bl-score (map score new-bl))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;        "
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;        ;(displayln new-bl-score)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;        (set! myturn (not myturn))"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;        (play-n-turns-2 (- n 1) new-bs))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";(define (remove-equivalents l-board-lpp)"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";  ;(display \"l-board-lpp: \") (display-list l-board-lpp) (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";  (cond ((null? l-board-lpp) l-board-lpp)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";        (else"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";         (define all-mirrors (get-all-symmetric-vectors (caar l-boa"
 #"rd-lpp)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";         (define (re-h l-b-lpp)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";           (cond ((null? l-b-lpp) '())"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";                 ((member (caar l-b-lpp) all-mirrors)"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";                  (re-h (cdr l-b-lpp)))"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";                 (else (cons (car l-b-lpp) (re-h (cdr l-b-lpp))))))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";         (define removed-all-mirrors (re-h (cdr l-board-lpp)))"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";         (cons (car l-board-lpp) (remove-equivalents removed-all-mi"
 #"rrors)))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(define (get-all-mirrors board)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";  (define orig-space (make-object space% 2 #f 0))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  (send orig-space set!-space board)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (list"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";   (send (mirror-space orig-space #t #f #f) get-space)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";   (send (mirror-space orig-space #f #t #f) get-space)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";   (send (mirror-space orig-space #f #f #t) get-space)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";   (send (mirror-space orig-space #f #t #t) get-space)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";   (send (mirror-space orig-space #t #f #t) get-space)"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";   (send (mirror-space orig-space #t #t #f) get-space)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";   (send (mirror-space orig-space #t #t #t) get-space)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";(define (get-all-symmetric-vectors board)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  (list ; this may be a list or set"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (mirror-3d-vector board #t #f #f)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (mirror-3d-vector board #f #t #f)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (mirror-3d-vector board #f #f #t)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (mirror-3d-vector board #f #t #t)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (mirror-3d-vector board #t #f #t)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   (mirror-3d-vector board #t #t #f)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";   (mirror-3d-vector board #t #t #t)))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;   (symmetric-3d-vector board '(x z y))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;   (symmetric-3d-vector board '(y x z))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;   (symmetric-3d-vector board '(z x y))"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;   (symmetric-3d-vector board '(y z x))"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;   (symmetric-3d-vector board '(x z y))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;; takes a board and returns a gtree"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define (all-plays-2 board)"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";  (define sym (get-all-symmetric-vectors board))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";  (define s (mutable-set))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";  (define (ap2h)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";    (for ((i 64))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";    (define z (quotient i 16))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";    (define y (quotient (remainder i 16) 4))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";    (define x (remainder (remainder i 16) 4))"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";    (define board1 (board-copy board))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";    ;(displayln board1)"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";    (if (= 0 (get-value board (list x y z)))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";        (begin"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";          (set!-value board1 (list x y z) (sign))"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";          (if (not (set-member? sym board1))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";              (begin"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";                (set-union! sym (get-all-symmetric-vectors board1))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";                (set-add! s board1))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";                ;(display i) (displayln \""
0 0 17 3 1 #":"
0 0 17 3 1 #" "
0 0 17 3 3 #"sym"
0 0 17 3 36 #" is now\") (displayln sym) (newline))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";              (void)))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";        (void))))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";  (ap2h)"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";  (gnode board (set->list s)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";(define (expand expr)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";  ;;; uses expr from the dictionary created by Patashnik"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  (define zero (char->integer #\\0))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";  (define exp-l (string->list expr))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";  (define (charList->integer l)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";    (define (charList->digitList l)"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";      (cond ((null? l) '(#f))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";            (else"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";             (define digit (- (char->integer (car l)) zero))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";             (if (< -1 digit 10)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                 (cons digit (charList->digitList (cdr l)))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";                 '(#f)))))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";    (define (digitList->integer l)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";      (cond ((null? l) 0)"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";            ((car l) (+ (car l) (* 10 (digitList->integer (cdr l)))"
 #"))"
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #";            (else (digitList->integer (cdr l)))))"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";    (digitList->integer (reverse (charList->digitList l))))"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";  (define (from-next-char l)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";    (cond ((null? l) '())"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";          (else"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";           (define digit (- (char->integer (car l)) zero))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";           (if (< -1 digit 10)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";              (from-next-char (cdr l))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";              l))))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";  (define (e-h l) ; expand helper"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";    ;(displayln l)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";    (cond ((null? l) '())"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";          ((equal? (car l) #\\x) (cons -1 (e-h (cdr l))))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";          ((equal? (car l) #\\o) (cons 1 (e-h (cdr l))))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";          (else"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";           (append (make-list (charList->integer l) 0)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";                   (e-h (from-next-char l))))))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";  (define pre-board (e-h exp-l))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";  ;(displayln pre-board)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";  (define len (length pre-board))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";  ;(displayln len)"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";  (define board-1d (append pre-board (make-list (- 64 len) 0)))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";  (list->board board-1d))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";(define (compress board) ; compresses for search within patashnik d"
 #"ictionary"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";  (define zero (char->integer #\\0))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";  (define l (board->list board))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";  (define (zeroList->digitList l)"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";    (define (zeroList->integer l (n 0))"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";      (cond ((null? l) #f) ; there is no integer if there's no char"
 #"acter at the end"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";            ((equal? (car l) 0) (zeroList->integer (cdr l) (+ n 1))"
 #")"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";            (else n)))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";    (define (integer->digitList n)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";      (cond ((not n) '())"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";            ((= 0 (quotient n 10)) (list (integer->char (+ zero (re"
 #"mainder n 10)))))"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";            (else (cons (integer->char (+ zero (quotient n 10)))"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";                        (integer->digitList (remainder n 10))))))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";    (integer->digitList (zeroList->integer l)))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";  (define (from-next-nonzero l)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";    (cond ((null? l) '())"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";          ((equal? 0 (car l)) (from-next-nonzero (cdr l)))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";          (else l)))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";  (define (c-h l)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";    (cond ((null? l) '())"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";          ((equal? (car l) -1) (cons #\\x (c-h (cdr l))))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";          ((equal? (car l) 1) (cons #\\o (c-h (cdr l))))"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";          (else"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";           (append (zeroList->digitList l)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";                   (c-h (from-next-nonzero l))))))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";  (list->string (c-h l)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(define (perfect-attack board)"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";  (define expr (compress board))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";  ;(displayln expr)"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  (define len (string-length expr))"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";  (define qubic-dict (open-input-file \"qubic-dict.txt\" #:mode 'te"
 #"xt))"
) 0 0 24 29 1 #"\n"
0 0 17 3 17 #";  (define (pa-h)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";    (define line (read-line qubic-dict))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";    (cond ((equal? line eof) #f)"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";          ((string-contains? line expr)"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";           (string->number (cadr (string-split line \" \"))))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";          (else (pa-h))))"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 22 #";  (define pos (pa-h))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";  (close-input-port qubic-dict)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";  pos)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0           0
