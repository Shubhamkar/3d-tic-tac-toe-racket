#lang racket

(include "win.rkt")

(define space%
  (define object%
    (super-new)
    (init max-coord)
    (init include-axes?)
    (init initial-value)
  ;; with origin as the center, makes a 3d-vector, with
  ;; max coordiante in each direction as max-coord
    (define r (+ (* 2 max-coord) (if include-axes? 1 0)))
    (define actual-space (make-3d-vector r r r initial-value))
    (define axes-included include-axes?)
    
    (define/public (set!-value pos val)
      (define x 0)
      (define y 0)
      (define z 0)
      (cond ((list? pos)
             (set! x (car pos))
             (set! y (cadr pos))
             (set! z (caddr pos)))
            (else (error "pos should be a list of coordinates (x y z): " pos)))
      (3d-vector-set! actual-space
                      (+ (quotient r 2) x (if (< x 0) 0
                                              (if axes-included 1 0)))
                      (+ (quotient r 2) y (if (< y 0) 0
                                              (if axes-included 1 0)))
                      (+ (quotient r 2) z (if (< z 0) 0
                                              (if axes-included 1 0)))
                      val))
    
    (define/public (get-value pos)
      (define x 0)
      (define y 0)
      (define z 0)
      (cond ((list? pos)
             (set! x (car pos))
             (set! y (cadr pos))
             (set! z (caddr pos)))
            (else (error "pos should be a list of coordinates (x y z): " pos)))
      (3d-vector-ref actual-space
                      (+ (quotient r 2) x (if (< x 0) 0
                                              (if axes-included 1 0)))
                      (+ (quotient r 2) y (if (< y 0) 0
                                              (if axes-included 1 0)))
                      (+ (quotient r 2) z (if (< z 0) 0
                                              (if axes-included 1 0)))))
    (define/public (display-space)
      (displayln actual-space))))

(define/public (mirror-space space mirror-x mirrox-y mirror-z)
;  (match direction
;    ;        ('left)
;    ;        ('right)
;    ;        ('flip-up)
;    ;        ('flip-down)
;    ;        ('flip-left)
;    ;        ('flip-right)
;    ('mirror-x)
;    ('mirror-y)
;    ('mirror-z)
;    ('mirror-xy)
;    ('mirror-yz)
;    ('mirror-zx)
;        ('mirror-xyz))
  (define x-fac (if mirror-x -1 1))
  (define y-fac (if mirror-y -1 1))
  (define z-fac (if mirror-z -1 1))
  (define space1 (make-object space% 2 #f 0))
  (for ((i 4))
    (define x1 (- i 2))
    (for ((j 4))
      (define y1 (- j 2))
      (for ((k 4))
        (define z1 (- k 2))
        (send space1 set!-value (list x1 y1 z1)
              (send space get-value
                    (list (* x-fac x1) (* y-fac y1) (* z-fac z1))))))))